{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, delay, put } from 'redux-saga/effects';\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: 'ADD_POST_SUCCESS' //data: result.data\n\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: 'ADD_POST_FAILURE',\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return throttle('ADD_POST_REQUEST', addPost, 1000);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/project/nodebird/front/sagas/post.js"],"names":["addPost","watchAddPost","postSaga","all","fork","delay","put","addPostAPI","data","axios","post","action","type","response","throttle"],"mappings":";;oDAQUA,O;qDAmBAC,Y;qDAIeC,Q;;AA/BzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,GAA3B,QAAsC,oBAAtC;;AAGA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACtB,SAAOC,KAAK,CAACC,IAAN,CAAW,WAAX,EAAwBF,IAAxB,CAAP;AACH;;AAGD,SAAUR,OAAV,CAAkBW,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMN,KAAK,CAAC,IAAD,CAAX;;AAFR;AAAA;AAIQ,iBAAMC,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAE,kBADA,CAEN;;AAFM,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUQ,iBAAMN,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAE,kBADA;AAENJ,YAAAA,IAAI,EAAE,YAAIK,QAAJ,CAAaL;AAFb,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBA,SAAUP,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMa,QAAQ,CAAC,kBAAD,EAAqBd,OAArB,EAA8B,IAA9B,CAAd;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACH,YAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, delay, put } from 'redux-saga/effects';\n\n\nfunction addPostAPI(data) {\n    return axios.post('/api/post', data)\n}\n\n\nfunction* addPost(action) {\n    try {\n        yield delay(1000);\n        //const result = yield call(addPostAPI, action.data)\n        yield put({\n            type: 'ADD_POST_SUCCESS',\n            //data: result.data\n        })\n    }\n    catch (err) {\n        yield put({\n            type: 'ADD_POST_FAILURE',\n            data: err.response.data\n        })\n    }\n}\n\n\n\nfunction* watchAddPost() {\n    yield throttle('ADD_POST_REQUEST', addPost, 1000)\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost)\n    ])\n}"]},"metadata":{},"sourceType":"module"}