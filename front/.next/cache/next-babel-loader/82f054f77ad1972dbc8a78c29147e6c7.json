{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nimport user from './user';\nimport post from './post';\nimport { combineReducers } from 'redux'; //(이전 상태, 액션\u001d) => 다움 상태 \n\nconst rootReducer = combineReducers({\n  //serser side rendering을 위해서 hydrate에 index가 필요\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case HYDRATE:\n        console.log('Hydrate', action);\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        //없으면(return값 undefined) error 발생\n        return state;\n    }\n  },\n  user,\n  //안에 user.js의 initialstate\n  post //안에 post.js의 initialstate\n\n});\nexport default rootReducer;","map":{"version":3,"sources":["C:/project/nodebird/front/reducers/index.js"],"names":["HYDRATE","user","post","combineReducers","rootReducer","index","state","action","type","console","log","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,eAAT,QAAgC,OAAhC,C,CAEA;;AACA,MAAMC,WAAW,GAAGD,eAAe,CAAC;AAChC;AACAE,EAAAA,KAAK,EAAE,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC3B,YAAQA,MAAM,CAACC,IAAf;AACI,WAAKR,OAAL;AACIS,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;AACA,+CACOD,KADP,GACiBC,MAAM,CAACI,OADxB;;AAIJ;AAAS;AACL,eAAOL,KAAP;AARR;AAUH,GAb+B;AAchCL,EAAAA,IAdgC;AAc1B;AACNC,EAAAA,IAfgC,CAe1B;;AAf0B,CAAD,CAAnC;AAkBA,eAAeE,WAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\nimport user from './user';\nimport post from './post';\nimport { combineReducers } from 'redux';\n\n//(이전 상태, 액션\u001d) => 다움 상태 \nconst rootReducer = combineReducers({\n    //serser side rendering을 위해서 hydrate에 index가 필요\n    index: (state = {}, action) => {\n        switch (action.type) {\n            case HYDRATE:\n                console.log('Hydrate', action);\n                return {\n                    ...state, ...action.payload\n                };\n\n            default: //없으면(return값 undefined) error 발생\n                return state;\n        }\n    },\n    user, //안에 user.js의 initialstate\n    post, //안에 post.js의 initialstate\n});\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}