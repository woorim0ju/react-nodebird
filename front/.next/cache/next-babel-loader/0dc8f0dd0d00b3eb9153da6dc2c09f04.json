{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\project\\\\nodebird\\\\front\\\\components\\\\LoginForm.js\",\n    _templateObject,\n    _templateObject2,\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useCallback } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport Link from 'next/link';\nimport styled from 'styled-components'; //import PropTypes from 'prop-types';\n\nimport useInput from '../hooks/useInput';\nimport { useDispatch } from 'react-redux';\nimport { loginAction } from '../reducers/user'; //return 안에 객체 형태로 style 삽입하면 안됨   \n// {} === {} //결과: false 객체는 모양이 같더라도 같지 않음\n//style={{}} 의 inline 방식의 {{}} 의 객체가 매번 다른것으로 인식이 되어 매번 리렌더링 되므로 사용하면 안됨\n//styled component 로 만들어 최적화 시킴\n//리렌더링: react에서 이전것과 지금것을 비교하여 바뀐 부분이 감지되면 return 안의 바뀐 부분만(전체는 아님) 다시 렌더링함\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar ButtonWrapper = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral([\"margin-top: 10px\"]))); //div tag의 css 적용된 ButtonWrapper\n\n_c = ButtonWrapper;\nvar FormWrapper = styled(Form)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"padding: 10px\"])));\n_c2 = FormWrapper;\n\"\";\n\nvar LoginForm = function LoginForm() {\n  _s();\n\n  //setIsLoggedIn validation 아래 \n  //redux- action dispatch \n  var dispatch = useDispatch();\n\n  var _useInput = useInput(''),\n      _useInput2 = _slicedToArray(_useInput, 2),\n      id = _useInput2[0],\n      onChangeId = _useInput2[1]; //hooks 중복제거\n\n\n  var _useInput3 = useInput(''),\n      _useInput4 = _slicedToArray(_useInput3, 2),\n      password = _useInput4[0],\n      onChangePassword = _useInput4[1]; //const [id, setId] = useState('');\n  //const [password, setPassword] = useState('');\n  //props로 넘겨주는  속성은 useCallback 사용\n  // const onChangeId = useCallback((e) => {\n  //     setId(e.target.value);\n  // }, []);\n  // const onChangePassword = useCallback((e) => {\n  //     setPassword(e.target.value);\n  // }, []);\n\n\n  var onSubmitForm = useCallback(function () {\n    //dummy data로 로그인 처리\n    console.log(id, password); //setIsLoggedIn(true);\n\n    dispatch(loginAction({\n      id: id,\n      password: password\n    })); //action dispatch\n  }, [id, password]);\n  return (\n    /*#__PURE__*/\n    //vitual dom\n    // form에서 button 누르면 onFinish 속성 적용, onFinish는 이미 e.preventDefault 적용되어 쓸필요없음\n    _jsxDEV(FormWrapper, {\n      onFinish: onSubmitForm,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"user-id\",\n          children: \"ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }, _this), /*#__PURE__*/_jsxDEV(Input, {\n          name: \"user-id\",\n          value: id,\n          onChange: onChangeId,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"user-password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }, _this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }, _this), /*#__PURE__*/_jsxDEV(Input, {\n          name: \"user-password\",\n          type: \"password\",\n          value: password,\n          onChange: onChangePassword,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(ButtonWrapper, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"primary\",\n          htmlType: \"submit\",\n          loading: false,\n          children: \"login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }, _this), /*#__PURE__*/_jsxDEV(Link, {\n          href: \"/signup\",\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              children: \"sign up\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 41\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 38\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, _this)\n  );\n}; // LoginForm.propTypes = { //validation\n//     setIsLoggedIn: PropTypes.func.isRequired,\n// };\n\n\n_s(LoginForm, \"n/CGE5NEGjUy/lrkg80J4K1I2hg=\", false, function () {\n  return [useDispatch, useInput, useInput];\n});\n\n_c3 = LoginForm;\nexport default LoginForm;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ButtonWrapper\");\n$RefreshReg$(_c2, \"FormWrapper\");\n$RefreshReg$(_c3, \"LoginForm\");","map":{"version":3,"sources":["C:/project/nodebird/front/components/LoginForm.js"],"names":["React","useCallback","Form","Input","Button","Link","styled","useInput","useDispatch","loginAction","ButtonWrapper","div","FormWrapper","LoginForm","dispatch","id","onChangeId","password","onChangePassword","onSubmitForm","console","log"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport Link from 'next/link';\nimport styled from 'styled-components';\n//import PropTypes from 'prop-types';\nimport useInput from '../hooks/useInput';\nimport { useDispatch } from 'react-redux';\nimport { loginAction } from '../reducers/user';\n\n//return 안에 객체 형태로 style 삽입하면 안됨   \n// {} === {} //결과: false 객체는 모양이 같더라도 같지 않음\n//style={{}} 의 inline 방식의 {{}} 의 객체가 매번 다른것으로 인식이 되어 매번 리렌더링 되므로 사용하면 안됨\n//styled component 로 만들어 최적화 시킴\n\n//리렌더링: react에서 이전것과 지금것을 비교하여 바뀐 부분이 감지되면 return 안의 바뀐 부분만(전체는 아님) 다시 렌더링함\nconst ButtonWrapper = styled.div`margin-top: 10px`;   //div tag의 css 적용된 ButtonWrapper\n\nconst FormWrapper = styled(Form)`padding: 10px`; ``\n\nconst LoginForm = () => { //setIsLoggedIn validation 아래 \n    //redux- action dispatch \n    const dispatch = useDispatch();\n\n\n    const [id, onChangeId] = useInput(''); //hooks 중복제거\n    const [password, onChangePassword] = useInput('');\n\n    //const [id, setId] = useState('');\n    //const [password, setPassword] = useState('');\n\n    //props로 넘겨주는  속성은 useCallback 사용\n    // const onChangeId = useCallback((e) => {\n    //     setId(e.target.value);\n    // }, []);\n\n    // const onChangePassword = useCallback((e) => {\n    //     setPassword(e.target.value);\n    // }, []);\n\n    const onSubmitForm = useCallback(() => { //dummy data로 로그인 처리\n        console.log(id, password);\n        //setIsLoggedIn(true);\n        dispatch(loginAction({ id, password })); //action dispatch\n    }, [id, password]);\n\n\n    return ( //vitual dom\n        // form에서 button 누르면 onFinish 속성 적용, onFinish는 이미 e.preventDefault 적용되어 쓸필요없음\n        <FormWrapper onFinish={onSubmitForm}> \n            <div>\n                <label htmlFor='user-id'>ID</label>\n                <br />\n                <Input name='user-id' value={id} onChange={onChangeId} required />\n            </div>\n            <div>\n                <label htmlFor='user-password'>Password</label>\n                <br />\n                <Input name='user-password' type=\"password\" value={password} onChange={onChangePassword} required />\n            </div>\n            <ButtonWrapper>\n                {/* htmlType=\"submit\" -> form의 onFinish가 자동 호출 submit 기능 */}\n                <Button type=\"primary\" htmlType=\"submit\" loading={false}>login</Button>\n                <Link href='/signup'><a><Button>sign up</Button></a></Link>\n            </ButtonWrapper>\n            <div>\n\n            </div>\n        </FormWrapper>\n    )\n}\n\n// LoginForm.propTypes = { //validation\n//     setIsLoggedIn: PropTypes.func.isRequired,\n// };\n\nexport default LoginForm;"]},"metadata":{},"sourceType":"module"}