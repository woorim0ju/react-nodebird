{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, createStore, compose } from \"redux\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware(); //const middlewares = [sagaMiddleware, loggerMiddleware];\n\n  const middlewares = [sagaMiddleware]; //redux 기능 확장 - enhancer\n\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) //배포용\n  : composeWithDevTools(applyMiddleware(...middlewares)); //개발용-devtools 연결\n\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/project/nodebird/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","createStore","compose","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,WAA1B,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,MAAMC,cAAc,GAAG,MAAM;AACzB,QAAMC,cAAc,GAAGJ,oBAAoB,EAA3C,CADyB,CAEzB;;AACA,QAAMK,WAAW,GAAG,CAACD,cAAD,CAApB,CAHyB,CAIzB;;AACA,QAAME,QAAQ,GAAG,QACXR,OAAO,CAACF,eAAe,CAAC,GAAGS,WAAJ,CAAhB,CADI,CAC8B;AAD9B,IAEXN,mBAAmB,CAACH,eAAe,CAAC,GAAGS,WAAJ,CAAhB,CAFzB,CALyB,CAOkC;;AAE3D,QAAME,KAAK,GAAGV,WAAW,CAACI,OAAD,EAAUK,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBP,QAAnB,CAAjB;AACA,SAAOK,KAAP;AACH,CAZD;;AAcA,MAAMG,OAAO,GAAGf,aAAa,CAACQ,cAAD,EAAiB;AAAEQ,EAAAA,KAAK;AAAP,CAAjB,CAA7B;AAEA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, createStore, compose } from \"redux\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst configureStore = () => {\n    const sagaMiddleware = createSagaMiddleware();\n    //const middlewares = [sagaMiddleware, loggerMiddleware];\n    const middlewares = [sagaMiddleware];\n    //redux 기능 확장 - enhancer\n    const enhancer = process.env.NODE_ENV === 'production'\n        ? compose(applyMiddleware(...middlewares)) //배포용\n        : composeWithDevTools(applyMiddleware(...middlewares)) //개발용-devtools 연결\n\n    const store = createStore(reducer, enhancer);\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n    return store;\n};\n\nconst wrapper = createWrapper(configureStore, { debug: process.env.NODE_ENV === 'development' });\n\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}