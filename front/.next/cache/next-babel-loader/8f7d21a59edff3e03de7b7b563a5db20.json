{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction loginAPI(data) {//return axios.post('/api/login', data)\n} //const l = logIn({ type: 'LOG_IN_REQUEST', data: { id: goddino@abc.com}});\n\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: 'LOG_IN_SUCCESS',\n            data: action.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: 'LOG_IN_FAILURE',\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction logOutAPI() {\n  return axios.post('/api/loginout');\n}\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: 'LOG_OUT_SUCCESS' //data: result.data\n\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: 'LOG_OUT_FAILURE',\n            data: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest('LOG_IN_REQUEST', logIn);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest('LOG_OUT_REQUEST', logOut);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin), fork(watchLogOut)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/project/nodebird/front/sagas/user.js"],"names":["logIn","logOut","watchLogIn","watchLogOut","userSaga","all","fork","axios","loginAPI","data","action","delay","put","type","response","logOutAPI","post","takeLatest","watchLogin"],"mappings":";;oDAUUA,K;qDAsBAC,M;qDAiBAC,U;qDAKAC,W;qDAIeC,Q;;AA1DzB,SAASC,GAAT,EAAcC,IAAd,QAA0B,oBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB,CACpB;AACH,C,CAED;;;AAGA,SAAUT,KAAV,CAAgBU,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMC,KAAK,CAAC,IAAD,CAAX;;AAFR;AAAA;AAIQ,iBAAMC,GAAG,CAAC;AACNC,YAAAA,IAAI,EAAE,gBADA;AAENJ,YAAAA,IAAI,EAAEC,MAAM,CAACD;AAFP,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUQ,iBAAMG,GAAG,CAAC;AACNC,YAAAA,IAAI,EAAE,gBADA;AAENJ,YAAAA,IAAI,EAAE,YAAIK,QAAJ,CAAaL;AAFb,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAASM,SAAT,GAAqB;AACjB,SAAOR,KAAK,CAACS,IAAN,CAAW,eAAX,CAAP;AACH;;AAGD,SAAUf,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMU,KAAK,CAAC,IAAD,CAAX;;AAFR;AAAA;AAIQ,iBAAMC,GAAG,CAAC;AACNC,YAAAA,IAAI,EAAE,iBADA,CAEN;;AAFM,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUQ,iBAAMD,GAAG,CAAC;AACNC,YAAAA,IAAI,EAAE,iBADA;AAENJ,YAAAA,IAAI,EAAE,aAAIK,QAAJ,CAAaL;AAFb,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUP,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMe,UAAU,CAAC,gBAAD,EAAmBjB,KAAnB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMc,UAAU,CAAC,iBAAD,EAAoBhB,MAApB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACY,UAAD,CADE,EAENZ,IAAI,CAACH,WAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork } from 'redux-saga/effects';\nimport axios from 'axios';\n\nfunction loginAPI(data) {\n    //return axios.post('/api/login', data)\n}\n\n//const l = logIn({ type: 'LOG_IN_REQUEST', data: { id: goddino@abc.com}});\n\n\nfunction* logIn(action) {\n    try {\n        yield delay(1000);\n        //const result = yield call(loginAPI, action.data)\n        yield put({\n            type: 'LOG_IN_SUCCESS',\n            data: action.data\n        })\n    }\n    catch (err) {\n        yield put({\n            type: 'LOG_IN_FAILURE',\n            data: err.response.data\n        })\n    }\n}\n\nfunction logOutAPI() {\n    return axios.post('/api/loginout')\n}\n\n\nfunction* logOut() {\n    try {\n        yield delay(1000);\n        //const result = yield call(logOutAPI)\n        yield put({\n            type: 'LOG_OUT_SUCCESS',\n            //data: result.data\n        })\n    }\n    catch (err) {\n        yield put({\n            type: 'LOG_OUT_FAILURE',\n            data: err.response.data\n        })\n    }\n}\n\nfunction* watchLogIn() {\n    yield takeLatest('LOG_IN_REQUEST', logIn)\n}\n\n\nfunction* watchLogOut() {\n    yield takeLatest('LOG_OUT_REQUEST', logOut)\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogin),\n        fork(watchLogOut),\n    ])\n}"]},"metadata":{},"sourceType":"module"}